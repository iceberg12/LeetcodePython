"""
Given an array of integers, every element appears twice except for one. Find that single one.
Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
"""
class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #1. O(n) runtime, O(n) space
        """
        dic = {}
        for i in range(len(nums)):
            if dic.get(nums[i], 0) > 0:
                dic.pop(nums[i])
            else:
                dic[nums[i]] = 1
        return dic.keys()[0]
        """
        #2. O(n) runtime, O(n) space. But faster.
        return 2*sum(set(nums))-sum(nums)
