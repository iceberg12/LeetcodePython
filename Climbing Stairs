class Solution(object):
    def climbStairs(self, n):
        """
        :type n: int
        :rtype: int
        """
        # This is a Fibonacci sequence f(n) = f(n-1) + f(n-2)
        
        #1. O(n) runtime with recursive
        """if n == 1:
            return 1
        p = 1
        q = 2
        for i in xrange(3, n+1):
            temp = q
            q = p + q
            p = temp
        return q
        """
        #2. O(logn) runtime with matrix exponential. Note that [f(n), f(n-1)] = A * [f(n-1), f(n-2)]
        T = [1,1,1,0]
        def mult(a, b):
            return [a[0]*b[0]+a[1]*b[2], a[0]*b[1]+a[1]*b[3], a[2]*b[0]+a[3]*b[2], a[2]*b[1]+a[3]*b[3]]
        def expo(n):
            if n == 0:
                return [1, 0, 0, 1]
            if n%2 == 1:
                return mult(T, expo(n-1))
            else:
                x = expo(math.floor(n/2))
                return mult(x, x)
        return expo(n)[0]
