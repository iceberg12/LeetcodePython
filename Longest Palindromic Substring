"""
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.
"""
class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        """
        if len(s) == 1:
            return s
        if len(s) == 2:
            if s[0] == s[1]:
                return s
            else:
                return s[0]
        #1. O(n^2) efficiency, O(n) space
        P = [0,0]
        k = 1
        #check for early stop in while loop
        while (k <= (len(s)-1) and k <= (len(s) - (P[1]-P[0]+1)/2)): #for k in range(1, len(s)):
            #check odd-length Palindrome
            i = k-1
            j = k+1
            while (i >= 0 and j <= len(s)-1 and s[i] == s[j]):
                i = i - 1
                j = j + 1
            if (P[1]-P[0]+1) < (j-i-1):
                P = [i+1,j-1]
            #check even-length Palindrome
            i = k-1
            j = k
            while (i >= 0 and j <= len(s)-1 and s[i] == s[j]):
                i = i - 1
                j = j + 1
            if (P[1]-P[0]+1) < (j-i-1):
                P = [i+1,j-1]
            k = k + 1
        return s[P[0]:P[1]+1]
